---
#############################################
# TemplateBot workflow to find repositories #
# and insert templates                      #
#############################################
name: TemplateBot

#################################################
# Set to run on schedule or on just random runs #
#################################################
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Un-comment to run on schedule default every 2 hrs
  # schedule:
  #   - cron: '0 */2 * * *'

###########################
# Set Permission to write #
###########################
#permissions:
#  contents: write


###############
# Set the Job #
###############
jobs:
  TemplateBot:
    runs-on: ubuntu-latest
    steps:
      ####################################################################
      # generate a token that gives us access to all repositories in org #
      ####################################################################
      - name: Generate Token
        uses: navikt/github-app-token-generator@v1
        id: get-token
        with:
          private-key: ${{ secrets.PRIVATE_KEY }}
          app-id: ${{ secrets.APP_ID }}

      ######################
      # Install needed lib #
      ######################
      - name: Install TweetSodium for encryption
        run: npm install tweetsodium

      ############################
      # Create the GitHub secret #
      ############################
      - name: Create the TemplateBot GitHub Secret
        uses: actions/github-script@v5
        with:
          # Have to use a different Token
          # than GITHUB_TOKEN as security prevents this...
          github-token: ${{ secrets.TOKEN }}
          script: |
            const sodium = require('tweetsodium')
            // Get the publicKey for encryption
            const getKey = await github.rest.actions.getRepoPublicKey({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            // console.log("keyInfo", getKey)
            // Load the vars
            const key = getKey.data.key
            const key_id = getKey.data.key_id
            // Get the generated PAT
            const value = "${{ steps.get-token.outputs.token }}"
            // Convert the message and key to Uint8Array's (Buffer.from implements that interface)
            const messageBytes = Buffer.from(value)
            const keyBytes = Buffer.from(key, 'base64')
            // Encrypt using LibSodium.
            const encryptedBytes = sodium.seal(messageBytes, keyBytes)
            // Base64 the encrypted secret
            const encrypted = Buffer.from(encryptedBytes).toString('base64')
            // console.log("encrypted", encrypted)
            // Create the GitHub Secret
            createToken = await github.rest.actions.createOrUpdateRepoSecret({
              owner: context.repo.owner,
              repo: context.repo.repo,
              secret_name: 'TEMPLATE_BOT_TOKEN',
              encrypted_value: encrypted,
              key_id: key_id
            })

      ##################################################
      # Checks-out TemplateBot under $GITHUB_WORKSPACE #
      ##################################################
      - name: Checkout TemplateBot
        uses: actions/checkout@v2

      - name: Dump github context
        run: echo "$GITHUB_CONTEXT"
        shell: bash
        env:
         GITHUB_CONTEXT: ${{ toJson(github) }}

      #######################
      # Run the TemplateBot #
      #######################
      - name: Find and Add Templates
        env:
          DEBUG: true
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          #GITHUB_TOKEN: ${{ steps.get-token.outputs.token }}
          ORG_NAME: ${{ github.repository_owner }}
        run: ./.automation/template-the-world.sh
